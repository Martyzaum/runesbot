import time

import utilities.api.item_ids as ids
import utilities.color as clr
import utilities.random_util as rd
from model.osrs.osrs_bot import OSRSBot
from utilities.api.morg_http_client import MorgHTTPSocket
from utilities.api.status_socket import StatusSocket
from utilities.geometry import RuneLiteObject


class OSRSBasicMiner(OSRSBot):
    def __init__(self):
        bot_title = "Copper/Tin/Iron Miner"
        description = "que passa manito"
        super().__init__(bot_title=bot_title, description=description)
        # Set option variables below (initial value is only used during UI-less testing)
        self.running_time = 1

    def create_options(self):
        self.options_builder.add_slider_option("running_time", "How long to run (minutes)?", 1, 480)

    def save_options(self, options: dict):
        for option in options:
            if option == "running_time":
                self.running_time = options[option]
            else:
                self.log_msg(f"Unknown option: {option}")
                print("Developer: ensure that the option keys are correct, and that options are being unpacked correctly.")
                self.options_set = False
                return
        self.log_msg(f"Running time: {self.running_time} minutes.")
        self.log_msg("Options set successfully.")
        self.options_set = True

    def main_loop(self):
        
        api_m = MorgHTTPSocket()
        api_s = StatusSocket()

        self.ores = 0
        inv = "empty"

        self.log_msg("Selecionando Inventario")
        self.mouse.move_to(self.win.cp_tabs[3].random_point())
        self.mouse.click()

        # Main loop
        start_time = time.time()
        end_time = self.running_time * 60
        while time.time() - start_time < end_time:
            # -- Perform bot actions here --

            # -- Detecta se o inventario esta cheio
            if api_s.get_is_inv_full():
                self.log_msg("Inventario esta cheio.")
                inv = "full"

            # -- Coloca o mouse em cima das arvores
            if inv == "empty":
                if not self.mouseover_text(contains="Mine", color=clr.OFF_WHITE) and not self.__move_mouse_to_nearest_ore():
                    failed_searches += 1
                    if failed_searches % 10 == 0:
                        self.log_msg("Procurando por ores...")
                    if failed_searches > 60:
                        # If we've been searching for a whole minute...
                        self.log_msg("Nenhuma ore encontrada em 1 minuto")
                    time.sleep(1)
                    continue
                failed_searches = 0  # If code got here, a tree was found

                    # -- Efetua o clique quando encontra a palavra Mine
                if not self.mouseover_text(contains="Mine", color=clr.OFF_WHITE):
                    continue
                self.mouse.click()
                time.sleep(0.5)

                # While the player is chopping (or moving), wait
                probability = 0.10
                while not api_m.get_is_player_idle():
                    # Every second there is a chance to move the mouse to the next tree, lessen the chance as time goes on
                    if rd.random_chance(probability):
                        self.__move_mouse_to_nearest_ore(next_nearest=True)
                        probability /= 2
                    time.sleep(1)

            if inv == "full":
                self.__banking(api_s)
                
            self.update_progress((time.time() - start_time) / end_time)

        self.update_progress(1)
        self.log_msg("Finished.")
        self.stop()

    def __banking(self, api_s: StatusSocket):
        target = self.get_all_tagged_in_rect(self.win.game_view, clr.GREEN)
        self.mouse.move_to(target[0].random_point(), mouseSpeed="slow")
        self.mouse.click()
        time.sleep(1)

    def __drop_ores(self, api_s: StatusSocket):
        slots = api_s.get_inv_item_indices(ids.ores)
        self.drop(slots)
        self.ores += len(slots)
        self.log_msg("Itens dropados, o inventario esta vazio")
        time.sleep(1)

    def __move_mouse_to_nearest_ore(self, next_nearest=False):
        ores = self.get_all_tagged_in_rect(self.win.game_view, clr.PINK)
        ore = None
        if not ores:
            return False
        # If we are looking for the next nearest ore, we need to make sure ores has at least 2 elements
        if next_nearest and len(ores) < 2:
            return False
        ores = sorted(ores, key=RuneLiteObject.distance_from_rect_center)
        ore = ores[1] if next_nearest else ores[0]
        if next_nearest:
            self.mouse.move_to(ore.random_point(), mouseSpeed="slow", knotsCount=2)
            self.log_msg("Ore Localizada.")
        else:
            self.mouse.move_to(ore.random_point())
            self.log_msg("Ore Localizada.")
        return True
