import time

import utilities.api.item_ids as ids
import utilities.color as clr
import utilities.random_util as rd
from model.osrs.osrs_bot import OSRSBot
from utilities.api.morg_http_client import MorgHTTPSocket
from utilities.api.status_socket import StatusSocket


class OSRSBasicMiner(OSRSBot):
    def __init__(self):
        bot_title = "Copper/Tin/Iron Miner"
        description = "que passa manito"
        super().__init__(bot_title=bot_title, description=description)
        # Set option variables below (initial value is only used during UI-less testing)
        self.running_time = 1

    def create_options(self):
        self.options_builder.add_slider_option("running_time", "How long to run (minutes)?", 1, 480)

    def save_options(self, options: dict):
        for option in options:
            if option == "running_time":
                self.running_time = options[option]
            else:
                self.log_msg(f"Unknown option: {option}")
                print("Developer: ensure that the option keys are correct, and that options are being unpacked correctly.")
                self.options_set = False
                return
        self.log_msg(f"Running time: {self.running_time} minutes.")
        self.log_msg("Options set successfully.")
        self.options_set = True

    def main_loop(self):
        
        api_m = MorgHTTPSocket()
        api_s = StatusSocket()

        self.ores = 0

        self.log_msg("Selecionando Inventario")
        self.mouse.move_to(self.win.cp_tabs[3].random_point())
        self.mouse.click()

        # Main loop
        start_time = time.time()
        end_time = self.running_time * 60
        while time.time() - start_time < end_time:
            # -- Perform bot actions here --

            if api_s.get_is_inv_full():
                self.__drop_logs(api_s)
                self.log_msg("Inventario esta cheio.")

            self.update_progress((time.time() - start_time) / end_time)

        self.update_progress(1)
        self.log_msg("Finished.")
        self.stop()


    def __drop_ores(self, api_s: StatusSocket):
        slots = api_s.get_inv_item_indices(ids.ores)
        self.drop(slots)
        self.ores += len(slots)
        self.log_msg("Itens dropados, o inventario esta vazio")
        time.sleep(1)
