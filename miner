import time

import utilities.api.item_ids as ids
import utilities.color as clr
import utilities.random_util as rd
from model.osrs.osrs_bot import OSRSBot
from model.runelite_bot import BotStatus
from utilities.api.morg_http_client import MorgHTTPSocket
from utilities.api.status_socket import StatusSocket
from utilities.geometry import RuneLiteObject


class OSRSMiner(OSRSBot):
    def __init__(self):
        bot_title = "Miner"
        description = "Bot mineiro"
        super().__init__(bot_title=bot_title, description=description)
        self.running_time = 1

    def create_options(self):
        self.options_builder.add_slider_option("running_time", "Por quanto tempo você quer que o bot rode? (em minutos)?", 1, 500)
        self.options_builder.add_checkbox_option("take_breaks", "Take breaks?", [" "])

    def save_options(self, options: dict):
        for option in options:
            if option == "running_time":
                self.running_time = options[option]
            elif option == "take_breaks":
                self.take_breaks = options[option] != []
            else:
                self.log_msg(f"Unknown option: {option}")
                print("Developer: ensure that the option keys are correct, and that options are being unpacked correctly.")
                self.options_set = False
                return
        self.log_msg(f"O Bot ficara ativo por {self.running_time} minutos.")
        self.log_msg(f"Bot {' ' if self.take_breaks else ' não '} fara pausas.")
        self.log_msg("Bot configurado com sucesso.")
        self.options_set = True

    def main_loop(self):
        # Setup APIs
        api_m = MorgHTTPSocket()
        api_s = StatusSocket()

        # Escolhe a sessão do inventario com base no numero do array
        self.log_msg("Selecionando Inventario")
        self.mouse.move_to(self.win.cp_tabs[4].random_point())
        self.mouse.click()

        # Main loop
        start_time = time.time()
        end_time = self.running_time * 60
        while time.time() - start_time < end_time:
           
             # 12% chande de fazer pausas
            if rd.random_chance(probability=0.12) and self.take_breaks:
                self.take_break(max_seconds=30, fancy=True)

            # 50% chance to drop logs early
            if rd.random_chance(probability=0.50):
                self.__drop_ores(api_s)

            # Se o inventario ficar cheio, dropa as ores
            if api_s.get_is_inv_full():
                self.__drop_ores(api_s)

            # If our mouse isn't hovering over a tree, and we can't find another tree...
            if not self.mouseover_text(contains="Mine", color=clr.OFF_WHITE) and not self.__move_mouse_to_nearest_ore():
                failed_searches += 1
                if failed_searches % 10 == 0:
                    self.log_msg("Procurando por Ores")
                if failed_searches > 60:
                    # Não achamos nenhuma arvore, iremos deslogar 
                    self.__logout("Nenhuma ore achada, deslogando")
                time.sleep(1)
                continue
            failed_searches = 0  # If code got here, a tree was found

            # Click if the mouseover text assures us we're clicking a tree
            if not self.mouseover_text(contains="Mine", color=clr.OFF_WHITE):
                continue
            self.mouse.click()
            time.sleep(0.5)

            #Faz o bot nao clicar em nada quando o jogador estiver minerando
            probability = 0.10
            while not api_m.get_is_player_idle():
                # Every second there is a chance to move the mouse to the next tree, lessen the chance as time goes on
                if rd.random_chance(probability):
                    self.__move_mouse_to_nearest_ore(next_nearest=True)
                    probability /= 2
                time.sleep(1)

            self.update_progress((time.time() - start_time) / end_time)

        self.update_progress(1)
        self.log_msg("Finished.")
        self.stop()


    def __move_mouse_to_nearest_ore(self, next_nearest=False):
       
        orees = self.get_all_tagged_in_rect(self.win.game_view, clr.YELLOW)
        ores = None
        if not ores:
            return False
        if next_nearest and len(ores) < 2:
            return False
        ores = sorted(orees, key=RuneLiteObject.distance_from_rect_center)
        ores = orees[1] if next_nearest else orees[0]
        if next_nearest:
            self.mouse.move_to(ores.random_point(), mouseSpeed="slow", knotsCount=2)
        else:
            self.mouse.move_to(ores.random_point())
        return True

    def __drop_ores(self, api_s: StatusSocket):
        slots = api_s.get_inv_item_indices(ids.ores)
        self.drop(slots)
        self.logs += len(slots)
        self.log_msg(f"Ores mineradas: ~{self.ores}")
        time.sleep(1)
    
    def __logout(self, msg):
        self.log_msg(msg)
        self.logout()
        self.stop()


    


